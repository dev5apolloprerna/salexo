<?php

namespace App\Http\Controllers\admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Repositories\Company\CompanyClientRepositoryInterface;
use App\Repositories\Employee\EmployeeRepositoryInterface;
use App\Models\State;
use App\Models\CompanyClient;
use App\Models\Employee;
use App\Models\Plan;
use App\Models\LeadCancelReason;
use App\Models\LeadPipeline;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Carbon; // Make sure Carbon is used
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use App\Models\LeadMaster;
use App\Models\DealCancel;
use App\Models\DealDone;

class CompanyClientController extends Controller
{
    protected $clientRepo;
    protected $employeeRepo;

    public function __construct(CompanyClientRepositoryInterface $clientRepo, EmployeeRepositoryInterface $employeeRepo)
    {
        $this->clientRepo = $clientRepo;
        $this->employeeRepo = $employeeRepo;
    }

    public function index(Request $request)
    {
        try {

            $search = $request->input('search');

            $query = $this->clientRepo->query();

            if ($search) {
                $query->where('company_name', 'like', '%' . $search . '%');
            }
            $clients = $query->with(['employee', 'state', 'plan'])->orderBy('company_id', 'desc')->paginate(config('app.per_page'));
            
            $employeesQuery = Employee::where('isCompanyAdmin', 1);

        // Apply search filter on employee ID, if provided
        if ($search) {
            $employeesQuery->where('emp_id', 'like', '%' . $search . '%');
        }

        $employees = $employeesQuery->get();

        // Create an associative array with employee IDs and their lead counts
        $employeeLeads = [];
        foreach ($employees as $emp) {
            
            $convertedPipelineId = LeadPipeline::where('slugname', 'deal-done')
                ->where('company_id', $emp->company_id)
                ->value('pipeline_id');
            
            // Query for leads generated by the employee across different tables (LeadMaster, DealDone, DealCancel)
            $generatedQuery = LeadMaster::where('iCustomerId', $emp->company_id)
                                        ->where('iEnterBy', $emp->emp_id)
                                        ->where('isDelete', 0);
            $generatedQuery1 = DealDone::where('iCustomerId', $emp->company_id)
                                        ->where('iEnterBy', $emp->emp_id)
                                        ->where('isDelete', 0);
            $generatedQuery2 = DealCancel::where('iCustomerId', $emp->company_id)
                                         ->where('iEnterBy', $emp->emp_id)
                                         ->where('isDelete', 0);
                                         
            $assignedQuery = LeadMaster::where('iCustomerId', $emp->company_id)
                    ->where('iemployeeId', $emp->emp_id)
                    ->where('isDelete', 0);
            $assignedQuery1 = DealDone::where('iCustomerId', $emp->company_id)
                ->where('iemployeeId', $emp->emp_id)
                ->where('isDelete', 0);
            $assignedQuery2 = DealCancel::where('iCustomerId', $emp->company_id)
                ->where('iemployeeId', $emp->emp_id)
                ->where('isDelete', 0);    
                
            $convertedQuery = DealDone::where('iCustomerId', $emp->company_id)
                    ->where('iemployeeId', $emp->emp_id)
                    ->where('status', $convertedPipelineId)
                    ->where('isDelete', 0); 
            
            $total = $generatedQuery->count() + $generatedQuery1->count() + $generatedQuery2->count();     
            // dd($total);
            // Calculate total leads (generated + assigned + converted) for the employee
            $employeeLeads[$emp->emp_id] = [
                'total' => $generatedQuery->count() + $generatedQuery1->count() + $generatedQuery2->count() 
                        //     + $assignedQuery->count() + $assignedQuery1->count() + $assignedQuery2->count() +
                        //   $convertedQuery->count(),
            ];
        }

        // Assign total leads to each client
        foreach ($clients as $client) {
            // If the client has an employee, assign total leads
            if ($client->employee && isset($employeeLeads[$client->employee->emp_id])) {
                $client->total_leads = $employeeLeads[$client->employee->emp_id]['total'];
            } else {
                // If no employee is assigned, set total leads to 0
                $client->total_leads = 0;
            }
        }
            
            return view('admin.company_client.index', compact('clients', 'search','employees'));
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'An error occurred: ' . $e->getMessage());
        }
    }

    public function create()
    {

        try {

            $states = State::pluck('stateName', 'stateId')->toArray(); // Adjust field names as per your DB
            $plans = Plan::where(['iStatus' => 1, 'isDelete' => 0])->pluck('plan_name', 'plan_id')->toArray();

            $planDetails = Plan::all()->keyBy('plan_id')->map(function ($plan) {
                return [
                    'amount' => $plan->plan_amount,
                    'days' => $plan->plan_days,
                ];
            });

            return view('admin.company_client.create', compact('states', 'planDetails', 'plans'));
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'An error occurred: ' . $e->getMessage());
        }
    }

    public function store(Request $request)
    {
        $request->validate([
            'email' => 'required|unique:company_client_master,email',
            'password' => 'required|min:6',
            'GST' => [
                'nullable', // or 'required' if mandatory
                'string',
                'max:100',
                'regex:/^(\d{2}[A-Z]{5}\d{4}[A-Z]{1}[A-Z\d]{1}[Z]{1}[A-Z\d]{1})$/'
            ],

        ], [
            'email.required' => 'Email is required.',
            'email.unique' => 'This email already exists.',
        ]);

        try {

            $data = $request->all();
            $data['subscription_start_date'] = Carbon::now();

            // Get the plan days
            $planDays = isset($request->plan_days) ? (int)$request->plan_days : 0;

            // Calculate subscription end date
            $data['subscription_end_date'] = Carbon::now()->addDays($planDays);

            // Hash the password if provided
            if (!empty($request->password)) {
                $data['password'] = Hash::make($request->password);
            }

            $client = CompanyClient::create($data);

            // Store also in employee_master as isCompanyAdmin = 1
            Employee::create([
                'company_id'     => $client->company_id,
                'emp_name'       => $client->company_name ?? '',
                'emp_mobile'     => $client->mobile ?? '',
                'emp_email'      => $client->email ?? '',
                'emp_loginId'    => $client->email ?? '',
                'password'       => $client->password,
                'isCompanyAdmin' => 1,
                'can_access_LMS' => 1,
                'role_id'        => 2,
            ]);

            $lead_pipelines = [
                [
                    'company_id' => $client->company_id,
                    'pipeline_name' => 'New Lead',
                    'slugname' => Str::slug('New Lead'),
                    'admin' => 1,
                    'followup_needed' => 'no',
                    'color' => '#FF5733',
                    'icon' => '<i class="fa-solid fa-plus"></i>',
                    'created_at' => now()
                ],
                [
                    'company_id' => $client->company_id,
                    'pipeline_name' => 'Deal Done',
                    'slugname' => Str::slug('Deal Done'),
                    'admin' => 1,
                    'followup_needed' => 'no',
                    'color' => '#33C1FF',
                    'icon' => '<i class="fa-solid fa-check"></i>',
                    'created_at' => now()
                ],
                [
                    'company_id' => $client->company_id,
                    'pipeline_name' => 'Deal Pending',
                    'slugname' => Str::slug('Deal Pending'),
                    'admin' => 1,
                    'followup_needed' => 'no',
                    'color' => '#28A745',
                    'icon' => '<i class="fa-solid fa-hourglass-start"></i>',
                    'created_at' => now()
                ],
                [
                    'company_id' => $client->company_id,
                    'pipeline_name' => 'Deal Cancel',
                    'slugname' => Str::slug('Deal Cancel'),
                    'admin' => 1,
                    'followup_needed' => 'no',
                    'color' => '#FFC107',
                    'icon' => '<i class="fa-solid fa-xmark"></i>',
                    'created_at' => now()
                ]
            ];

            foreach ($lead_pipelines as $lead_pipeline) {
                LeadPipeline::create($lead_pipeline);
            }

            $lead_cancel_reasons = [
                [
                    'company_id' => $client->company_id,
                    'reason' => 'No longer interested'
                ],
                [
                    'company_id' => $client->company_id,
                    'reason' => 'Budget constraints'
                ],
                [
                    'company_id' => $client->company_id,
                    'reason' => 'Project postponed or canceled'
                ]
            ];

            foreach ($lead_cancel_reasons as $lead_cancel_reason) {
                LeadCancelReason::create($lead_cancel_reason);
            }


            return redirect()->route('company-client.index')->with('success', 'Client created successfully');
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'An error occurred: ' . $e->getMessage());
        }
    }

    public function edit($id)
    {
        try {

            $client = $this->clientRepo->find($id);
            $states = State::pluck('stateName', 'stateId')->toArray();
            $plans = Plan::pluck('plan_name', 'plan_id')->toArray();

            $planDetails = Plan::all()->keyBy('plan_id')->map(function ($plan) {
                return [
                    'amount' => $plan->plan_amount,
                    'days' => $plan->plan_days,
                ];
            });

            return view('admin.company_client.edit', compact('client', 'states', 'plans', 'planDetails'));
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'An error occurred: ' . $e->getMessage());
        }
    }


    public function update(Request $request, $id)
    {
        try {

            $data = $request->all();

            $data['subscription_start_date'] = Carbon::now();

            // Get the plan days
            $planDays = isset($request->plan_days) ? (int)$request->plan_days : 0;

            // Calculate subscription end date
            $data['subscription_end_date'] = Carbon::now()->addDays($planDays);

            $this->clientRepo->update($id, $data);

            $client = $this->clientRepo->find($id);

            $employee = Employee::where('emp_email', $client->email)->first();

            if ($employee) {
                $employee->emp_name = $client->company_name;
                $employee->emp_mobile = $client->mobile;
                $employee->emp_email = $client->email;
                $employee->isCompanyAdmin = 1;
                $employee->can_access_LMS = $client->can_access_LMS ?? 1;

                if (!empty($data['password'])) {
                    $employee->password = Hash::make($data['password']);
                }

                $employee->save();
            }


            return redirect()->route('company-client.index')->with('success', 'Client updated successfully');
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'An error occurred: ' . $e->getMessage());
        }
    }
    public function changepassword($id)
    {
        $userid = $id;

        return view('admin.company_client.changepassword', compact('userid'));
    }
    public function updatepassword(Request $request, $id)
    {

        $request->validate([
            'new_password' => 'required|min:6',
        ]);

        try {
            $hashedPassword = Hash::make($request->new_password);

            $employee = Employee::where('company_id', $id)->first();

            $this->employeeRepo->updatePassword($employee->emp_id, $hashedPassword);

            $this->clientRepo->updatePassword($id, $hashedPassword);

            //   return back()->with('success', 'Password updated successfully.');
            return redirect()->route('company-client.index')->with('success', 'Password updated successfully.');
        } catch (\Exception $e) {
            return back()->with('error', 'An error occurred while updating the password.');
        }
    }

    public function destroy(Request $request, $id = null)
    {
        try {
            $id = $request->company_id ?? '';
            $this->clientRepo->delete($id);
            $employee = Employee::where('company_id', $id)->first();
            $this->employeeRepo->delete($employee->emp_id);

            return redirect()->route('company-client.index')->with('success', 'Client deleted successfully');
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'An error occurred: ' . $e->getMessage());
        }
    }
}
